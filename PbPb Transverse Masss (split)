//load some stuff that we need
#include "TFile.h"
#include "TTree.h"
#include <TDirectory.h>
#include "TH1D.h"
#include "TMath.h"
#include "TVector3.h"
#include "TCanvas.h"
#include "TLegend.h"
#include <vector>
#include "TLine.h"
#include <iostream>


//the code execution starts here
void PbPbrootAnalyzer(){
  bool TestRun=0;
  float cut[5]={1,2,3,4,5};

  std::vector<float> * genPt = 0;
  std::vector<float> * genEta = 0;
  std::vector<float> * genPhi = 0;
  std::vector<int> * genPdg = 0;
  std::vector<int> * genChg = 0;

  std::vector<float> * recoPt = 0;
  std::vector<float> * recoEta = 0;
  std::vector<float> * recoPhi = 0;
  std::vector<int> * recoId = 0;

  //open the input file
  /*TFile *file = new TFile("rootAnalyzer.C", "CREATE");
    TDirectory *newDir = file->mkdir("Reco/Gen");
    newDir->cd();*/

  //TFile * f = TFile::Open("neutrinoStudy_TEST_MBpp.root","read");
  TFile * f = TFile::Open("C:/Users/user/Desktop/pp_withNeutrino_HiForestMiniAOD.root","read");

cout<<"37"<<endl;

  //setup the info for gen tree
  TTree * genTree = (TTree*) f->Get("HiGenParticleAna/hi");
  genTree->SetBranchAddress("pt",&genPt);
  genTree->SetBranchAddress("eta",&genEta);
  genTree->SetBranchAddress("phi",&genPhi);
  genTree->SetBranchAddress("pdg",&genPdg);
  genTree->SetBranchAddress("chg",&genChg);

  //setup the info for reco tree
  TTree * recoTree = (TTree*) f->Get("particleFlowAnalyser/pftree");
  recoTree->SetBranchAddress("pfPt",&recoPt);
  recoTree->SetBranchAddress("pfEta",&recoEta);
  recoTree->SetBranchAddress("pfPhi",&recoPhi);
  recoTree->SetBranchAddress("pfId",&recoId);

    TFile * f2 = TFile::Open("C:/Users/user/Desktop/HiForestMiniAOD_WBosonPbPb_Merged.root","read");

 //setup the info for gen tree
  TTree * genTree2 = (TTree*) f2->Get("HiGenParticleAna/hi");
  genTree2->SetBranchAddress("pt",&genPt);
  genTree2->SetBranchAddress("eta",&genEta);
  genTree2->SetBranchAddress("phi",&genPhi);
  genTree2->SetBranchAddress("pdg",&genPdg);
  genTree2->SetBranchAddress("chg",&genChg);

  //setup the info for reco tree
  TTree * recoTree2 = (TTree*) f2->Get("particleFlowAnalyser/pftree");
  recoTree2->SetBranchAddress("pfPt",&recoPt);
  recoTree2->SetBranchAddress("pfEta",&recoEta);
  recoTree2->SetBranchAddress("pfPhi",&recoPhi);
  recoTree2->SetBranchAddress("pfId",&recoId);

  //Raven: define analysis variables under here until next comment!
   TH1* h1 = new TH1F("h1", "GenPt;X-axis;Occurences", 100, 0, 100);
   TH1* h2 = new TH1F("h2", "GenEta;eta;Occurences", 100, -60.0, 80.0);
   TH1* h3 = new TH1F("h3", "GenPhi;phi;Occurences", 100, -60.0, 80.0);
   TH1* h1_2 = new TH1F("h1_2", "GenPt;X-axis;Occurences",100, 0, 100);
   TH1* h2_2 = new TH1F("h2_2", "GenEta;eta;Occurences", 100, -60.0, 80.0);
   TH1* h3_2 = new TH1F("h3_2", "GenPhi;phi;Occurences", 100, -60.0, 80.0);

  TH1* hbPt = new TH1F("hbPt", "Gen B Pt;X-axis;Occurences", 100, -10, 80);
   TH1* hbEta = new TH1F("hbEta", "Gen B Eta;eta;Occurences", 100, -6.0, 6.0);
   TH1* hbPhi = new TH1F("hbPhi", "Gen B Phi;phi;Occurences", 100, -6.0, 6.0);
   
  TH1* hbPt2 = new TH1F("hbPt2", "Gen B Pt Pb;X-axis;Occurences", 100, -10, 80);
   TH1* hbEta2 = new TH1F("hbEta2", "Gen B Eta Pb;eta;Occurences", 100, -6.0, 6.0);
   TH1* hbPhi2 = new TH1F("hbPhi2", "Gen B Phi Pb;phi;Occurences", 100, -6.0, 6.0);

   TH1* h4 = new TH1F("h4", "Reco Pt;pt;Occurences;", 100, 0.0, 80.0);
   TH1* h5 = new TH1F("h5", "Reco Eta;eta;Occurences", 100, -60.0, 80.0);
   TH1* h6 = new TH1F("h6", "Reco Phi;phi;Occurences", 100, -60.0, 80.0);
   TH1* h4_2 = new TH1F("h4_2", "Reco Pt;pt;Occurences;", 100, -2.0, 6.0);
   TH1* h5_2 = new TH1F("h5_2", "Reco Eta;eta;Occurences", 100, -60.0, 80.0);
   TH1* h6_2 = new TH1F("h6_2", "Reco Phi;phi;Occurences", 100, -60.0, 80.0);
  
cout<<"88"<<endl;

  float myExampleVariables = 0;


    TH1* h7 = new TH1F("h7", "GenPt_x;Px;", 100,  0.0, 80.0);
    TH1* h8 = new TH1F("h8", "GenPt_y;Py;", 100,  0.0, 80.0);
    TH1* h7_2 = new TH1F("h7_2", "GenPt_x;Px;", 100,  0.0, 80.0);
    TH1* h8_2 = new TH1F("h8_2", "GenPt_y;Py;", 100, 0.0, 80.0);
    TH1* h9 = new TH1F("h9", "RecoPt_x;Px", 100, 0.0, 80.0);
    TH1* h10 = new TH1F("h10", "RecoPt_y;Py", 100, 0.0, 80.0);
    TH1* h9_2 = new TH1F("h9_2", "RecoPt_x;Px", 100, 0.0, 80.0);
    TH1* h10_2 = new TH1F("h10_2", "RecoPt_y;Py", 100, 0.0, 80.0);

    
    TH1* h11 = new TH1F("h11", "GenPn X;Pn_x;", 100, -40.0, 40.0);
    TH1* h12 = new TH1F("h12", "GenPn Y;Pn_y;", 100, -40.0, 40.0);
    TH1* h13 = new TH1F("h13", "RecoPn X;Pn_x", 100, -40.0, 40.0);
    TH1* h14 = new TH1F("h14", "RecoPn2 Y;Pn_y", 100, -40.0, 40.0);
    TH1* h11_2 = new TH1F("h11_2", "GenPn;Pn_x;", 100, -40.0, 40.0);
    TH1* h12_2 = new TH1F("h12_2", "GenPn_;Pn_y;", 100, -40.0, 40.0);
    TH1* h13_2 = new TH1F("h13_2", "RecoPn2;Pn_x", 100, -40.0, 40.0);
    TH1* h14_2 = new TH1F("h14_2", "RecoPn2_;Pn_y", 100, -40.0, 40.0);

  TH1* h15[5];
    for (int i=0;i<5;i++){
    h15[i] = new TH1F(Form("h15%.1f",cut[i]),"Neutrino's Distance Traveled;Gen P_{T}^{miss} [GeV];Events;", 100, 0, 100.0);}
    //GenPt-new
  TH1* h15_Pb[5];
    for (int i=0;i<5;i++){
    h15_Pb[i] = new TH1F(Form("h15_Pb%.1f",cut[i]),"GenPt PbPb;Gen P_{T}^{miss} [GeV];Events;", 100, 0, 100.0);}
    //GenPt-new PbPb each cut

    TH1* h15reg = new TH1F("h15reg", "GenPt_new;Pt;", 100, 0, 100.0);
     TH1* h15reg2 = new TH1F("h15reg2", "GenPt_new Pb;Pt;", 100, 0, 100.0);

    TH1* h16 = new TH1F("h16", "GenPhi_new;Phi;", 100, TMath::Pi(), TMath::Pi());
    TH1* h16_2 = new TH1F("h16_2", "GenPhi_new;Phi;", 100, TMath::Pi(), TMath::Pi());

cout<<"124"<<endl;

    TH1* h17no = new TH1F("h17no", "RecoPt_new;Pt;", 100, 0, 100.0);
     TH1* h17[5];
       TH1* h17_Pb[5];
    for (int i=0;i<5;i++){
    h17[i] = new TH1F(Form("h17%.1f",cut[i]),"Neutrinos Distance Traveled;Rec P_{T}^{miss} [GeV];Events;", 100, -2, 70.0); 
    h17_Pb[i] = new TH1F(Form("h17_Pb%.1f",cut[i]),"Neutrinos Distance Traveled Pb;Rec P_{T}^{miss} [GeV];Events;", 100, -2, 70.0); }
    //Reco Pt_new
    TH1* h18 = new TH1F("h18", "RecoPhi_new;Phi", 100, TMath::Pi(), TMath::Pi());
    TH1* h17_2 = new TH1F("h17_2", "RecoPt_new-with;Pt", 100, 0, 70.0);
    TH1* h18_2 = new TH1F("h18_2", "RecoPhi_new-no;Phi", 100, TMath::Pi(), TMath::Pi());
  
cout<<"136"<<endl;

 TH1* h_CMSPt[5];
 TH1* h_CMSPtNo[5];
  TH1* h_CMSPt_Pb[5];
 TH1* h_CMSPtNo2[5];
   for(int i=0;i<5;i++){
      h_CMSPt[i] = new TH1F(Form("h_CMSPt%.1f",cut[i])," ;Rec P_{T}^{miss} - Gen P_{T}^{miss} [GeV];Events",100,-15,15);
      //reco-gen both with cuts
      h_CMSPtNo[i] = new TH1F(Form("h_CMSPtNo%.1f",cut[i]),"Reco-Gen Pt No Gen cuts;Rec P_{T}^{miss} - Gen P_{T}^{miss} [GeV];Events", 100, -30, 50);
      //Gen has no cuts
      h_CMSPt_Pb[i] = new TH1F(Form("h_CMSPt%.1f",cut[i])," ;Rec P_{T}^{miss} - Gen P_{T}^{miss} [GeV];Events",100,-15,15);
      //reco-gen both with cuts
      h_CMSPtNo2[i] = new TH1F(Form("h_CMSPtNo2%.1f",cut[i]),"Reco-Gen Pt No Gen cuts;Rec P_{T}^{miss} - Gen P_{T}^{miss} [GeV];Events", 100, -30, 50);}


    TH1* h_CMSPhi = new TH1F("h_CMSPhi", "Reco-GenPhi;Phi", 100, -10,10);
    TH1* h_CMSPt2 = new TH1F("h_CMSPt2", "Reco-GenPt_no;Eta", 100, -20,20);
    TH1* h_CMSPhi2 = new TH1F("h_CMSPhi2", "Reco-GenPhi-no;Phi", 100, -10,10);

   TH1* h_nuPhi = new TH1F("h_nuPhi", "NuPhi;phi;Occurences", 100, -10.0, 10.0);
   TH1* h_nuEta= new TH1F("h_nuEta", "NuEta;eta;Occurences", 100, -10.0, 10.0);
   TH1* h_nuPt = new TH1F("h_nuPt", "NuPt;X-axis;Occurences", 100, 0.0, 60.0);

   TH1* h_nuPhi2 = new TH1F("h_nuPhi2", "NuPhi Pb;phi;Occurences", 100, -10.0, 10.0);
   TH1* h_nuEta2= new TH1F("h_nuEta2", "NuEta Pb;eta;Occurences", 100, -10.0, 10.0);
   TH1* h_nuPt2 = new TH1F("h_nuPt2", "NuPt Pb;X-axis;Occurences", 100, 0.0, 60.0);

   TH2* hPtEta = new TH2F("hPtEta", "Pt & Eta;Pt;Eta", 100, 0.0, 60.0, 100, -4,4);

    TH2* hRecoGenPt_2 = new TH2F("hRecoGenPt_2", "Reco V. Gen Pt Pb;GenPt;RecoPt", 100, 0.0, 200.0, 100, 0,200);

        TH2* hGenPtNuPt = new TH2F("hGenPtNuPt", "GenPt v. NuPt;GenPt;NuPt", 100, 0.0, 100.0, 100, 0,50);
        TH2* hGenPtNuPt2 = new TH2F("hGenPtNuPt2", "GenPt v. NuPt;GenPt;NuPt", 100, 0.0, 100.0, 100, 0,50);
        TH2* hRecoGenPtRat = new TH2F("hRecoGenPtRat", "Reco:Gen Pt Chg!=0;GenPt;Ratio", 100, 0.0, 100.0, 100, 0,50);
        TH2* hRecoGenPtRat2 = new TH2F("hRecoGenPtRat2", "Reco:Gen Pt Chg!=0 Pb;GenPt;Ratio", 100, 0.0, 100.0, 100, 0,50);


  TH2* hRecoGenPt[5];
  TH1* hmT[5];
  TH2* hRecoGenPt_Pb[5];
  TH1* hmT2[5];
  TH1* hmT2_split[5];
  TH1* hmT2_split2[5];
    for(int i=0;i<5;i++){
      hRecoGenPt[i] = new TH2F(Form("hRecoGenPt%.1f",cut[i]),"Reco Vs. Gen Pt;Gen P_{T}^{miss} [GeV];Rec P_{T}^{miss} [GeV]", 100, 0.0, 60.0, 100, 0,60);
      hRecoGenPt_Pb[i] = new TH2F(Form("hRecoGenPt_Pb%.1f",cut[i]),"Reco Vs. Gen Pt ;Gen P_{T}^{miss} [GeV];Rec P_{T}^{miss} [GeV]", 100, 0.0, 100.0, 100, 0,100);

      hmT[i] = new TH1F(Form("hmT%.1f",cut[i]), "Transverse Mass;M_{T} [GeV];Events", 100, 0, 120);
      hmT2[i] = new TH1F(Form("hmT2%.1f",cut[i]), "Transverse Mass;M_{T} [GeV];Events", 100, 0, 120);
      hmT2_split[i] = new TH1F(Form("hmT2%.1f",cut[i]), "Transverse Mass split less;M_{T} [GeV];Events", 100, 0, 120);
      hmT2_split2[i] = new TH1F(Form("hmT2%.1f",cut[i]), "Transverse Mass split greater;M_{T} [GeV];Events", 100, 0, 120);
      }
    TH1* hrecosize= new TH1F("hrecosize","Reco Particle Size;Pt;events",100,0,10000);

cout<<"160"<<endl;
int p=0;
int count=0;
 //int size=10000;

float genPt_newA[5]={0}, recoPt_newA[5]={0}, genPhi_newA[5]={0},recoPhi_newA[5]={0};
float CMS_effPtA[5]={0}, CMS_effPtno[5]={0},bPhi[5]={0},bEta[5]={0},bPt[5]={0},deltaPhi[5]={0},mT[5]={0};

   float genPt_newA2[5]={0}, recoPt_newA2[5]={0}, genPhi_newA2[5]={0}, recoPhi_newA2[5]={0};
    float CMS_effPtA2[5]={0}, CMS_effPtno2[5]={0},bPhi2[5]={0},bEta2[5]={0},bPt2[5]={0},deltaPhi2[5]={0},mT2[5]={0};

  //loop through each event with index i
  int numEntries = (TestRun) ? 100 : genTree->GetEntries();
  for(int i = 0; i<numEntries; i++){
   // std::cout << "\nStarting event number: " << i << std::endl;

    //load the gen particles
    genTree->GetEntry(i);
   // std::cout << "Gen Loop:" << std::endl;

      float recoPt_new=0,genPhi_new=0,recoPhi_new=0,CMS_effPhi=0,CMS_effPt=0, genPt_new=0,nuPt=-20, nuPhi=-1,nuEta=99999,ratio=0, nuPt_2=0;

     for(int k=0;k<5;k++){
    //loop through the gen particles (there are j of them)
    float Pn=0,Pn2=0;
    //float CMS_effPtA[5]={0};

    for(unsigned int j = 0; j<genPt->size(); j++){
      //std::cout << genPt->at(j) << " " << genEta->at(j) << " " << genPhi->at(j) << " " << genPdg->at(j) << " " << genChg->at(j) << std::endl;

     if(genChg->at(j)!=0 && genPt->at(j)>=cut[k])   //charge of only +1 and -1 and using Pt of more than 1,2,3,4,5
       {

           h1->Fill(genPt->at(j));
           h2->Fill(genEta->at(j));
           h3->Fill(genPhi->at(j));
        }
      
        if (genPdg->at(j) == 12 || genPdg->at(j) == 14 || genPdg->at(j) == 16 || genPdg->at(j) == -12 || genPdg->at(j) == -14 || genPdg->at(j) == -16) {
          nuPt=genPt->at(j);
          nuPhi=genPhi->at(j);  
         // cout<<"GenEta"<<genEta->at(j)<<endl;                                //centralize the neutrinos pt,phi,eta
          nuEta=genEta->at(j);

        if (genEta->at(j)<-2.4 || genEta->at(j)>2.4)
        {
            continue;
        }
        
        }

    //cout<<"Neutrino"<<nuEta<<endl;

    if (genChg->at(j)!=0 && genPt->at(j)>=cut[k])
    {
    float Py= genPt->at(j)*(TMath::Sin(genPhi->at(j)));
    float Px=genPt->at(j)*(TMath::Cos(genPhi->at(j)));                //calculate Pt to x and y

   // cout<<"py: "<<Py<<endl;

      h7->Fill(Px);
      h8->Fill(Py);

     Pn += -(Px);                                                     //Add vectors
     Pn2 += -(Py);

    // cout<<"Pn:"<<Pn2<<endl;

     /*if (genEta->at(j)<-2.4 || genEta->at(j)>2.4)
        {
            continue;
        } */

    //cout<<"Gen"<<nuEta<<endl;


    genPt_newA[k]=TMath::Sqrt(TMath::Power(Pn,2)+TMath::Power(Pn2,2));            //calculate missing momentum of Pt particles
    genPt_new=TMath::Sqrt(TMath::Power(Pn,2)+TMath::Power(Pn2,2));

    if(Pn>0)
    {
      genPhi_new=TMath::ATan(Pn2/Pn);                           //calculate new missing phi 
    }

      else if (Pn<0)
      {
        genPhi_new=TMath::ATan2(Pn2,Pn);
      }
      else
      {
      std::cout<<"Invalid1"<<std::endl;
      cout<<p<<endl;    
        p++;  }


      if(Pn>0){
          genPhi_newA[k]=TMath::ATan(Pn2/Pn);                           //calculate new missing phi 
           }
        else if (Pn<0){
           genPhi_new[k]=TMath::ATan2(Pn2,Pn);
           }
        else{
           std::cout<<"Invalid1"<<std::endl;
           cout<<p<<endl;    
           p++;  }
      

     if (genPdg->at(j) == 12 || genPdg->at(j) == 14 || genPdg->at(j) == 16 || genPdg->at(j) == -12 || genPdg->at(j) == -14 || genPdg->at(j) == -16) 
     {
      continue;                        //Skip neutrinos
     }

     h11->Fill(Pn);                    //Fill new Momemntum
     h12->Fill(Pn2); 

     
    /* if (genPhi_new==0)
      {
    
      
      h_isGenPhiZero->Fill(Pn);
      h_isGenPhiZeroY->Fill(Pn2);

      } */
      
     h15[k]->Fill(genPt_newA[k]);                 // If Found neutrino Pt is less than 20 or greater than 20 make new histogram
     h15reg->Fill(genPt_new);
     h16->Fill(genPhi_new); 

      if (genPdg->at(j) == 11 || genPdg->at(j) == 13 || genPdg->at(j) == 15 || genPdg->at(j) == -11 || genPdg->at(j) == -13 || genPdg->at(j) == -15) {
          bPt[k]=genPt->at(j);
          bPhi[k]=genPhi->at(j);  
          bEta[k]=genEta->at(j);                                                        //muon,electron,town  pt,phi,eta
     // cout<<"Gen bPt "<<bPt<<endl;
      //  cout<<"Gen bEta "<<bEta<<endl; 
      //  cout<<"Gen bPhi "<<bPhi<<endl;  
      
        hbPt->Fill(bPt[k]);
        hbEta->Fill(bEta[k]);
        hbPhi->Fill(bPhi[k]);
      }

     

    }

    }
     
       
    }
  
    //load the reco particles
    recoTree->GetEntry(i);

    for(int k=0;k<5;k++)
    {
      float Pn3=0, Pn4=0;
   // std::cout << "Reco Loop:" << std::endl;
   // loop through the reco particles (there are j of them)
    for(unsigned int j = 0; j < recoPt->size(); j++){
       //std::cout << recoPt->at(j) << " " << recoEta->at(j) << " " << recoPhi->at(j) << " " << recoId->at(j) << std::endl;


      if(recoPt->at(j)>=cut[k])
      {
      h4->Fill(recoPt->at(j));
      h5->Fill(recoEta->at(j));                   
      h6->Fill(recoPhi->at(j));
      

  if (recoEta->at(j)<-2.4 || recoEta->at(j)>2.4)
        {
            continue;
        }
      float Py2= recoPt->at(j)*(TMath::Sin(recoPhi->at(j)));       //Get Px,Py
      float Px2=recoPt->at(j)*(TMath::Cos(recoPhi->at(j)));  

      h9->Fill(Px2);                                      //Fill Reco Px,Py
      h10->Fill(Py2);
      
       Pn3 += -(Px2);
       Pn4 += -(Py2);                                      //reco missing momentum px,py

      //     cout<<"Reco"<<recoEta->at(j)<<endl;

       
       recoPt_newA[k]=TMath::Sqrt(TMath::Power(Pn3,2)+TMath::Power(Pn4,2));                   //new missing momentum reco Pt of particles
       recoPt_new=TMath::Sqrt(TMath::Power(Pn3,2)+TMath::Power(Pn4,2));

      if(Pn3>0)                                          //Allows us to graph New phi in all regions
      {
        recoPhi_new=TMath::ATan(Pn4/Pn3);
      }

       else if (Pn3<0)
        {
         recoPhi_new=TMath::ATan2(Pn4,Pn3);
        }
         else 
         {
        std::cout<<"Invalid2"<<std::endl;
         }



        h13->Fill(Pn3);                        //Fill new Added Vectors for x and y
        h14->Fill(Pn4);
            
        
     h17[k]->Fill(recoPt_newA[k]);
     h17no->Fill(recoPt_new);
     h18_2->Fill(recoPhi_new); 
     }
  } }
  //  ratio=recoPt_new/genPt_newA[k];                  //how much of gen is shown in reco

  for(int k=0;k<5;k++){

     hRecoGenPt[k]->Fill(recoPt_newA[k],genPt_newA[k]);                 //fills when pt particle is >1,2,3,4,5
   

   hGenPtNuPt->Fill(genPt_newA[k],nuPt);
   hRecoGenPtRat->Fill(genPt_newA[k],ratio);                       //fills ratio        

     CMS_effPhi=recoPhi_new-genPhi_new;
    CMS_effPtA[k]=recoPt_newA[k]-genPt_newA[k];            // variable of how much of reco gen overlap= efficency

    CMS_effPtno[k]=recoPt_newA[k]-genPt_new;
    //CMS_effPt=recoPt_new-genPt_new;

    h_CMSPtNo[k]->Fill(CMS_effPtno[k]);

    //h_CMSPt->Fill(CMS_effPt);
     h_CMSPhi->Fill(CMS_effPhi);

   
      h_CMSPt[k]->Fill(CMS_effPtA[k]);                //fills when p


      deltaPhi[k] = (TMath::Cos(bPhi[k] - genPhi_new));
       // cout<<"deltaphi"<<deltaPhi<<endl;
      mT[k]=TMath::Sqrt(2*bPt[k]*recoPt_new[k]*(1-deltaPhi[k]));
      //  cout<<"MT"<<mT<<endl;
      if(mT!=0){
        hmT[k]->Fill(mT[k]);
        }
  }
      

     h_nuPt->Fill(nuPt);
      h_nuPhi->Fill(nuPhi);
      h_nuEta->Fill(nuEta); 
    hPtEta->Fill(nuPt,nuEta);

    }
  
cout<<"453"<<endl;

  //SECOND FILE LOOP - NO NEUTRINO

  int numEntries2 = (TestRun) ? 100 : genTree2->GetEntries();
  for(int i = 0; i<numEntries2; i++){
   // std::cout << "\nStarting event number: " << i << "No neutrinos"<< std::endl;

//cout<<"404 entries"<<endl;

    //load the gen particles
    genTree2->GetEntry(i);
   // std::cout << "Gen Loop PbPb:" << std::endl;

      float genPt_new2=0,recoPt_new2=0,genPhi_new2=0,recoPhi_new2=0,CMS_effPhi2=0,CMS_effPt2=0,nuPt2=0,nuEta2=0,nuPhi2=0,ratio2=0;

     for(int k=0;k<5;k++){
    //loop through the gen particles (there are j of them)
    float Pn_2=0,Pn2_2=0;

    for(unsigned int j = 0; j<genPt->size(); j++){
      //std::cout << genPt->at(j) << " " << genEta->at(j) << " " << genPhi->at(j) << " " << genPdg->at(j) << " " << genChg->at(j) << std::endl;

     if(genChg->at(j)!=0 && genPt->at(j)>=cut[k])   //charge of only +1 and -1 and using Pt of more than 1,2,3,4,5
       {
      h1_2->Fill(genPt->at(j));
      h2_2->Fill(genEta->at(j));
      h3_2->Fill(genPhi->at(j));
       }
      
        if (genPdg->at(j) == 12 || genPdg->at(j) == 14 || genPdg->at(j) == 16 || genPdg->at(j) == -12 || genPdg->at(j) == -14 || genPdg->at(j) == -16) {
          nuPt2=genPt->at(j);
          nuPhi2=genPhi->at(j);  
         // cout<<"GenEta"<<genEta->at(j)<<endl;                                //centralize the neutrinos pt,phi,eta
          nuEta2=genEta->at(j);

        if (genEta->at(j)<-2.4 || genEta->at(j)>2.4)
        {
            continue;
        }
        
        }

    //cout<<"Neutrino"<<nuEta<<endl;

    if (genChg->at(j)!=0 && genPt->at(j)>=cut[k])
    {
   
    float Py_2=genPt->at(j)*(TMath::Sin(genPhi->at(j)));
    float Px_2=genPt->at(j)*(TMath::Cos(genPhi->at(j)));

      h7_2->Fill(Px_2);
      h8_2->Fill(Py_2);

     Pn_2 += -(Px_2);
     Pn2_2 += -(Py_2);
    
    genPt_new2=TMath::Sqrt(TMath::Power(Pn_2,2)+TMath::Power(Pn2_2,2));
    genPt_newA2[k]=TMath::Sqrt(TMath::Power(Pn_2,2)+TMath::Power(Pn2_2,2));            //calculate missing momentum of Pt particles

    if(Pn_2>0)
    {
      genPhi_new2=TMath::ATan(Pn2_2/Pn_2);
    }

      else if (Pn_2<0)
      {
        genPhi_new2=TMath::ATan2(Pn2_2,Pn_2);
      }
      else 
      {
      std::cout<<"Invalid3"<<std::endl;
      }


      if(Pn_2>0){
          genPhi_newA2[k]=TMath::ATan(Pn2_2/Pn_2);                           //calculate new missing phi 
           }
        else if (Pn_2<0){
           genPhi_newA2[k]=TMath::ATan2(Pn2_2,Pn_2);
           }
        else{
           std::cout<<"Invalid1"<<std::endl;
           cout<<p<<endl;    
           p++;  }
      

     if (genPdg->at(j) == 12 || genPdg->at(j) == 14 || genPdg->at(j) == 16 || genPdg->at(j) == -12 || genPdg->at(j) == -14 || genPdg->at(j) == -16) 
     {
      continue;                        //Skip neutrinos
     }

     h11_2->Fill(Pn_2);                     //fill new momentum
     h12_2->Fill(Pn2_2); 
     

      
     h15_Pb[k]->Fill(genPt_newA2[k]);                 // If Found neutrino Pt is less than 20 or greater than 20 make new histogram
     h15reg2->Fill(genPt_new2);
     h16_2->Fill(genPhi_new2); 

      if (genPdg->at(j) == 11 || genPdg->at(j) == 13 || genPdg->at(j) == 15 || genPdg->at(j) == -11 || genPdg->at(j) == -13 || genPdg->at(j) == -15) {
          bPt2[k]=genPt->at(j);
          bPhi2[k]=genPhi->at(j);  
          bEta2[k]=genEta->at(j);                                                        //muon,electron,town  pt,phi,eta
     // cout<<"Gen bPt "<<bPt<<endl;
      //  cout<<"Gen bEta "<<bEta<<endl; 
      //  cout<<"Gen bPhi "<<bPhi<<endl;  
      
        hbPt2->Fill(bPt2[k]);
        hbEta2->Fill(bEta2[k]);
        hbPhi2->Fill(bPhi2[k]);
      }

     

    }

    }
     
       
    }
  
    //load the reco particles
    recoTree2->GetEntry(i);

    for(int k=0;k<5;k++)
    {
      float Pn3_2=0, Pn4_2=0;
   // std::cout << "Reco Loop:" << std::endl;
   // loop through the reco particles (there are j of them)
    for(unsigned int j = 0; j < recoPt->size(); j++){
       //std::cout << recoPt->at(j) << " " << recoEta->at(j) << " " << recoPhi->at(j) << " " << recoId->at(j) << std::endl;


      if(recoPt->at(j)>=cut[k])
      {
        h4_2->Fill(recoPt->at(j));
        h5_2->Fill(recoEta->at(j));                   
        h6_2->Fill(recoPhi->at(j));

      

  if (recoEta->at(j)<-2.4 || recoEta->at(j)>2.4)
        {
            continue;
        }
    float Py2_2= recoPt->at(j)*(TMath::Sin(recoPhi->at(j)));       //Get Px,Py
      float Px2_2=recoPt->at(j)*(TMath::Cos(recoPhi->at(j)));  

      h9_2->Fill(Px2_2);                                      //Fill Reco Px,Py
      h10_2->Fill(Py2_2);
      
       Pn3_2 += -(Px2_2);
       Pn4_2 += -(Py2_2);                                          //Add Px's/Py's to get new vector

       
       recoPt_newA2[k]=TMath::Sqrt(TMath::Power(Pn3_2,2)+TMath::Power(Pn4_2,2));                   //new missing momentum reco Pt of particles
       recoPt_new2=TMath::Sqrt(TMath::Power(Pn3_2,2)+TMath::Power(Pn4_2,2));            

     if(Pn3_2>0)
      {
        recoPhi_new2=TMath::ATan(Pn4_2/Pn3_2);
      }

       else if (Pn3_2<0)
        {
         recoPhi_new2=TMath::ATan2(Pn4_2,Pn3_2);
        }
         else 
         {
        std::cout<<"Invalid4"<<std::endl;
         }


        if(Pn3_2>0)                                          //Allows us to graph New phi in all regions
      {
        recoPhi_newA2[k]=TMath::ATan(Pn4_2/Pn3_2);
      }

       else if (Pn3_2<0)
        {
         recoPhi_newA2[k]=TMath::ATan2(Pn4_2,Pn3_2);
        }
         else 
         {
        std::cout<<"Invalid2"<<std::endl;
         }



        h13_2->Fill(Pn3_2);                        //Fill new Added Vectors for x and y
        h14_2->Fill(Pn4_2);

      if(k==4)
          {
            hrecosize->Fill(recoPt->size());
           

          
//2nd attempt
float totalIntegral = hrecosize->Integral();
float halfIntegral = 0.5 * totalIntegral; // 50% of the total integral

float cIntegral = 0.0;
int binAtHalfIntegral = -1; // Initialized random bin number

// Loop over bins to find where integral reaches 50%
for (int bin = 1; bin <= hrecosize->GetNbinsX(); bin++) {
    cIntegral += hrecosize->GetBinContent(bin);
    if (cIntegral >= halfIntegral) {
        binAtHalfIntegral = bin;
        break;
    }
}
}


     h17_Pb[k]->Fill(recoPt_newA2[k]);
     h17_2->Fill(recoPt_new2);
     h18_2->Fill(recoPhi_new2); 
     }
  } }

//cout<<"639 end of PbPb Reco loop"<<endl;

  for(int k=0;k<5;k++){

     hRecoGenPt_Pb[k]->Fill(recoPt_newA2[k],genPt_newA2[k]);                 //fills when pt particle is >1,2,3,4,5
   

   hGenPtNuPt2->Fill(genPt_newA2[k],nuPt2);
   hRecoGenPtRat2->Fill(genPt_newA2[k],ratio2);                       //fills ratio        

     CMS_effPhi2=recoPhi_new2-genPhi_new2;
    CMS_effPtA2[k]=recoPt_newA2[k]-genPt_newA2[k];            // variable of how much of reco gen overlap= efficency

    CMS_effPtno2[k]=recoPt_newA2[k]-genPt_new2;
    //CMS_effPt=recoPt_new-genPt_new;

    h_CMSPtNo2[k]->Fill(CMS_effPtno2[k]);

    //h_CMSPt->Fill(CMS_effPt);
     h_CMSPhi2->Fill(CMS_effPhi2);

   
      h_CMSPt_Pb[k]->Fill(CMS_effPtA2[k]);                //fills when p


      deltaPhi2[k] = (TMath::Cos(bPhi2[k] - recoPhi_newA2[k]));
       // cout<<"deltaphi"<<deltaPhi<<endl;
      mT2[k]=TMath::Sqrt(2*bPt2[k]*recoPt_newA2[k]*(1-deltaPhi2[k]));
      hmT2[k]->Fill(mT2[k]);
   
   if(4750>recoPt->size())
   {
    hmT2_split[k]->Fill(mT2[k]);
   }
   else if (4750<recoPt->size())
   {
    hmT2_split2[k]->Fill(mT2[k]);
   }

        }

      

     h_nuPt2->Fill(nuPt2);
      h_nuPhi2->Fill(nuPhi2);
      h_nuEta2->Fill(nuEta2); 
  }


// binAtHalfIntegral now contains the bin number where cumulative integral is 50%
if (binAtHalfIntegral != -1) {
    float integralAtHalf = hrecosize->Integral(1, binAtHalfIntegral);
    cout << "Integral at 50percent: " << integralAtHalf << " Bin at half: "<<binAtHalfIntegral<<endl;
} else {
    cout << "Invalid:not found" << endl;
}

float center=hrecosize->GetBinCenter(48);

cout<<"Center of bin: "<<center<<endl;

  cout<<"709-End of Second File"<<endl;

  h1-> SetLineColor(kRed);             //Set Color of Gen
  h2-> SetLineColor(kRed);
  h3-> SetLineColor(kRed);
  h1_2-> SetLineColor(kRed);             //Set Color of Gen
  h2_2-> SetLineColor(kRed);             //Set Color of Gen
  h3_2-> SetLineColor(kRed);             //Set Color of Gen
  h11_2-> SetLineColor(kRed);             //Set Color of Gen
  h12_2-> SetLineColor(kRed);
  h13_2-> SetLineColor(kRed);
  h14_2-> SetLineColor(kRed);

 

  float n = h4->GetEntries();         //Normalize Graphs to 1
  float n2 = h5->GetEntries();
  float n3 = h6->GetEntries();


  float n4 = h1->GetEntries();
  float n5 = h2->GetEntries();
  float n6 = h3->GetEntries();

  h4->Scale(1.0 / n);
  h5->Scale(1.0 / n2);
  h6->Scale(1.0 / n3);
  h1->Scale(1.0 / n4);
  h2->Scale(1.0 / n5);                    //scale of gen graphs to reco size
  h3->Scale(1.0 / n6);


 
    /*  TCanvas *c = new TCanvas();              //Gen & Reco Pt
      h1->Draw(); 
      h4->Draw("SAME");
      TLegend *legend = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend->AddEntry(h1, "genPt", "l"); // "l" specifies line for histogram
      legend->AddEntry(h4, "recoPt", "l");
      legend->SetTextSize(.03); 
      legend->Draw();

      TCanvas *c_2 = new TCanvas();
          h1_2->Draw();                    //Gen & reco Pt 2nd file
          h4_2->Draw("SAME");
      TLegend *legend1 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend1->AddEntry(h1_2, "genPt_no", "l"); // "l" specifies line for histogram
      legend1->AddEntry(h4_2, "recoPt_no", "l");
      legend1->SetTextSize(.03); 
      legend1->Draw();


      TCanvas *c1 = new TCanvas();                 //Gen & Reco Eta
      h2->Draw();
      h5->Draw("SAME");
      TLegend *legend2 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend2->AddEntry(h2, "genPt", "l"); // "l" specifies line for histogram
      legend2->AddEntry(h5, "recoPt", "l");
      legend2->SetTextSize(0.03); 
      legend2->Draw();

      TCanvas *c1_2 = new TCanvas();              //Gen & Reco Eta 2nd File
       h2_2->Draw();
       h5_2->Draw("SAME");
      TLegend *legend3 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend3->AddEntry(h2_2, "genPt_no", "l"); // "l" specifies line for histogram
      legend3->AddEntry(h5_2, "recoPt_no", "l");
      legend3->SetTextSize(0.03); 
      legend3->Draw();
  
      TCanvas *c2 = new TCanvas();                //Gen & Reco Phi
      h3->Draw();
      h6->Draw("SAME");
      TLegend *legend4 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend4->AddEntry(h3, "genPt", "l"); // "l" specifies line for histogram
      legend4->AddEntry(h6, "recoPt", "l");
      legend4->SetTextSize(0.03); 
      legend4->Draw();

      TCanvas *c2_2 = new TCanvas();               //Gen & Reco Eta 2nd File
      h3_2->Draw();
      h6_2->Draw("SAME");
      TLegend *legend5 = new TLegend(0.1, 0.7, 0.3, 0.9); 
        legend5->AddEntry(h3_2, "recoPt_no", "l");
        legend5->AddEntry(h6_2, "recoPt_no", "l");
      legend5->SetTextSize(0.03); 
      legend5->Draw();

  h7_2-> SetLineColor(kRed);             //Set Color of No neutrino
  h8_2-> SetLineColor(kRed);
  h9_2-> SetLineColor(kRed);
  h10_2-> SetLineColor(kRed);

      TCanvas *cpx = new TCanvas();             //Gen Pt into x First and 2nd File
      h7->Draw();
      h7_2->Draw("SAME");
      TLegend *legend6 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend6->AddEntry(h7, "with neutrino", "l"); // "l" specifies line for histogram
      legend6->AddEntry(h7_2, "no neutrino", "l");
      legend6->SetTextSize(0.03); 
      legend6->Draw();

      TCanvas *cpy = new TCanvas();           //Gen Pt into y First and 2nd File
      h8->Draw();
      h8_2->Draw("SAME");
      TLegend *legend7 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend7->AddEntry(h8, "with", "l"); // "l" specifies line for histogram
      legend7->AddEntry(h8_2, "no neutrino", "l");
      legend7->SetTextSize(0.03); 
      legend7->Draw();

      TCanvas *cpx_reco = new TCanvas();       //Reco Pt into x First and 2nd File
      h9->Draw();
      h9_2->Draw("SAME");
      TLegend *legend8 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend8->AddEntry(h9, "with", "l"); // "l" specifies line for histogram
      legend8->AddEntry(h9_2, "no neutrino", "l");
      legend8->SetTextSize(0.03); 
      legend8->Draw();
 
      TCanvas *cpy_reco = new TCanvas();         //Reco Pt into y First and 2nd File
      h10->Draw();
      h10_2->Draw("SAME");
      TLegend *legend9 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend9->AddEntry(h10, "with", "l"); // "l" specifies line for histogram
      legend9->AddEntry(h10_2, "no neutrino", "l");
      legend9->SetTextSize(0.03); 
      legend9->Draw();

      TCanvas *c7 = new TCanvas();              //Gen Phi into x First and 2nd File
      h11->Draw();
      h11_2->Draw("SAME");
      TLegend *legend10 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend10->AddEntry(h11, "with", "l"); // "l" specifies line for histogram
      legend10->AddEntry(h11_2, "no neutrino", "l");
      legend10->SetTextSize(0.03); 
      legend10->Draw();

      TCanvas *c8 = new TCanvas();          //Gen Phi into y First and 2nd File
      h12->Draw();
      h12_2->Draw("SAME");
      TLegend *legend11 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend11->AddEntry(h12, "with", "l"); // "l" specifies line for histogram
      legend11->AddEntry(h12_2, "no neutrino", "l");
      legend11->SetTextSize(0.03); 
      legend11->Draw();

      TCanvas *c9 = new TCanvas();            //Reco Phi into x First and 2nd File
      h13->Draw();
      h13_2->Draw("SAME");
      TLegend *legend15 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend15->AddEntry(h13, "with", "l"); // "l" specifies line for histogram
      legend15->AddEntry(h13_2, "no neutrino", "l");
      legend15->SetTextSize(0.03); 
      legend15->Draw();

cout<<"LINE 699"<<endl;

      TCanvas *c10 = new TCanvas();          //Reco Phi into y First and 2nd File
      h14->Draw();
      h14_2->Draw("SAME");
      TLegend *legend16 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend16->AddEntry(h14, "with", "l"); // "l" specifies line for histogram
      legend16->AddEntry(h14_2, "no neutrino", "l");
      legend16->SetTextSize(0.03); 
      legend16->Draw();


      h16_2-> SetLineColor(kRed);
      h15_2-> SetLineColor(kBlue);

      h15[0]->SetLineColor(kRed);
      h15[1]->SetLineColor(kOrange);
      h15[2]->SetLineColor(kBlack);
      h15[3]->SetLineColor(kViolet);
      h15[4]->SetLineColor(kGreen); 

      TCanvas *c11 = new TCanvas();           //New Gen Pt - 1st and 2nd File
      h15->Draw(); 
      h15_2->Draw("SAME");
      TLegend *legend14 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend14->AddEntry(h15,"With Pt ","l"); // "l" specifies line for histogram
      legend14->AddEntry(h15_2, "No neutrino", "l"); 
      legend14->SetTextSize(.03); 
      legend14->Draw(); 

      TCanvas *c11 = new TCanvas();           //New Gen Pt - 1st and 2nd File
      h15[0]->Draw(); 
      for(int i=1;i<5;i++){
      h15[i]->Draw("SAME"); }
      h15_2->Draw("SAME");
      TLegend *legend14 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      for(int i=0;i<5;i++){
      legend14->AddEntry(h15[i],Form("With Pt %.1f",cut[i]),"l");} // "l" specifies line for histogram
      legend14->AddEntry(h15_2, "No neutrino", "l"); 
      legend14->SetTextSize(.03); 
      c11->SetLogy();
      legend14->Draw(); 
      
      TCanvas *crecoptreg = new TCanvas();           //New Gen Pt - 1st and 2nd File
      h15reg->Draw(); 
      h15_2->Draw("SAME");
      TLegend *legend28 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend28->AddEntry(h15reg,"With Pt ","l"); // "l" specifies line for histogram
      legend28->AddEntry(h15_2, "No neutrino", "l"); 
      legend28->SetTextSize(.03); 
      legend28->Draw();

      TCanvas *c12 = new TCanvas();        //New Phi for gen
      h16->Draw();
      h16_2->Draw("SAME");
      TLegend *legend17 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend17->AddEntry(h16, "with", "l"); // "l" specifies line for histogram
      legend17->AddEntry(h16_2, "no neutrino", "l");
      legend17->SetTextSize(0.03); 
      legend17->Draw();


   // TCanvas *c_gennewPtless = new TCanvas();
    // h_newPtless->Draw();

    cout<<"First for loop of draw canvas 754 "<<endl;

      h18-> SetLineColor(kRed);

      h17[0]->SetLineColor(kRed);
      h17[1]->SetLineColor(kOrange);
      h17[2]->SetLineColor(kBlack);
      h17[3]->SetLineColor(kViolet);
      h17[4]->SetLineColor(kGreen);

      TCanvas *c_recoPt = new TCanvas();           //New Reco Pt - 1st and 2nd File
      h17[0]->Draw(); 
      for(int i=1;i<5;i++){
      h17[i]->Draw("SAME"); }
      h17_2->Draw("SAME");
      TLegend *legend18 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      for(int i=0;i<5;i++){
      legend18->AddEntry(h17[i],Form("With neutrino Pt %.1f",cut[i]), "l");} // "l" specifies line for histogram
      legend18->AddEntry(h17_2, "No neutrino", "l"); 
      legend18->SetTextSize(.03); 
      c_recoPt->SetLogy();
      legend18->Draw();

    
      TCanvas *c_recoPhi = new TCanvas();
      h18->Draw(); 
      h18_2->Draw("SAME");
      TLegend *legend19 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend19->AddEntry(h18, "With neutrino", "l"); // "l" specifies line for histogram
      legend19->AddEntry(h18_2, "No neutrino", "l");
      legend19->SetTextSize(.03); 
      legend19->Draw();

    /*TCanvas *c_isGenZero = new TCanvas();
     h_isGenPhiZero->Draw();
    TCanvas *c_isGenZeroY = new TCanvas();
     h_isGenPhiZeroY->Draw();
   TCanvas *c_cmsPt = new TCanvas();
     h_CMSPt->Draw();

    TCanvas *c_cmsPhi = new TCanvas();
     h_CMSPhi->Draw(); 

     // h_CMSPt-> SetLineColor(kRed);
      h_CMSPhi-> SetLineColor(kRed);
     // h_lessRecoPt-> SetLineColor(kRed);
     // h_nuEtaL->SetLineColor(kRed);
      //h_nuPhiless->SetLineColor(kRed);
     // h_nuPtless->SetLineColor(kRed);

      h_CMSPt[0]->SetLineColor(kRed);
      h_CMSPt[1]->SetLineColor(kOrange);
      h_CMSPt[2]->SetLineColor(kBlack);
      h_CMSPt[3]->SetLineColor(kViolet);
      h_CMSPt[4]->SetLineColor(kGreen);

      TCanvas *c_cmsPt = new TCanvas(); 
      h_CMSPt[0]->Draw(); 
      for(int i=1;i<5;i++){
      h_CMSPt[i]->Draw("SAME"); }
      h_CMSPt2->Draw("SAME");
      h_CMSPt[0]->SetStats(0);
      TLegend *legend20 = new TLegend(0.15, 0.4, 0.4, 0.85); 
      h_CMSPt[0]->GetYaxis()->SetRangeUser(0,1500);
      legend20->AddEntry((TObject*)0,"pp Collisons","");
      for(int i=0;i<5;i++){
      legend20->AddEntry(h_CMSPt[i], Form("With neutrino Pt %.0f",cut[i]), "l");} // "l" specifies line for histogram
      legend20->AddEntry(h_CMSPt2, "No neutrino", "l"); 
      legend20->SetTextSize(.03); 
      h_CMSPt[0]->GetXaxis()->CenterTitle(true);
      h_CMSPt[0]->GetYaxis()->CenterTitle(true);
      legend20->Draw();


      h_CMSPtNo[0]->SetLineColor(kRed);
      h_CMSPtNo[1]->SetLineColor(kOrange);
      h_CMSPtNo[2]->SetLineColor(kBlack);
      h_CMSPtNo[3]->SetLineColor(kViolet);
      h_CMSPtNo[4]->SetLineColor(kGreen);

      TCanvas *c_cmsPtno = new TCanvas(); 
      h_CMSPtNo[0]->Draw(); 
      h_CMSPtNo[1]->Draw("SAME");
      h_CMSPtNo[2]->Draw("SAME"); 
      h_CMSPtNo[3]->Draw("SAME"); 
      h_CMSPtNo[4]->Draw("SAME"); 

      h_CMSPt2->Draw("SAME");
      TLegend *legend22 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      for(int i=0;i<5;i++){
      legend22->AddEntry(h_CMSPtNo[i], Form("With neutrino Reco Pt %.1f",cut[i]), "l");} // "l" specifies line for histogram
      legend22->AddEntry(h_CMSPt2, "No neutrino", "l"); 
      legend22->SetTextSize(.03); 
      legend22->Draw();

      TCanvas *c_cmsPhi = new TCanvas();
      h_CMSPhi->Draw(); 
      h_CMSPhi2->Draw("SAME");
      TLegend *legend21 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend21->AddEntry(h_CMSPhi, "with neutrino", "l"); // "l" specifies line for histogram
      legend21->AddEntry(h_CMSPhi2, "no neutrino", "l");
      legend21->SetTextSize(.03); 
      legend21->Draw(); 

     /* TCanvas *creco1 = new TCanvas();
       h_moreRecoPt->Draw();    
       h_lessRecoPt->Draw("SAME");
      TLegend *legend13 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend13->AddEntry(h_moreRecoPt, "more", "l"); // "l" specifies line for histogram
      legend13->AddEntry(h_lessRecoPt, "less", "l");
      legend13->SetTextSize(.03); 
      legend13->Draw(); 

      TCanvas *creco2 = new TCanvas();
       h_nuPhi->Draw();
    //   h_nuPhiless->Draw("SAME");
   //   TLegend *legend13 = new TLegend(0.1, 0.7, 0.3, 0.9); 
   //   legend13->AddEntry(h_nuPhi, "more", "l"); // "l" specifies line for histogram
   //   legend13->AddEntry(h_nuPhiless, "less", "l");
   //   legend13->SetTextSize(.03); 
   //   legend13->Draw(); 

       TCanvas *creco3 = new TCanvas();
       h_nuEta->Draw();
     // h_nuEtaL->Draw("SAME");
     // TLegend *legend13 = new TLegend(0.1, 0.7, 0.3, 0.9); 
   //   legend13->AddEntry(h_nuEta, "more", "l"); // "l" specifies line for histogram
    //  legend13->AddEntry(h_nuEtaL, "less", "l");
   //   legend13->SetTextSize(.03); 
    //  legend13->Draw(); 

    TCanvas *cnuPt = new TCanvas();
      h_nuPt->Draw();
     // h_nuPtless->Draw("SAME");
      TLegend *legend13 = new TLegend(0.1, 0.7, 0.3, 0.9); 
      legend13->AddEntry(h_nuPt, "more", "l"); // "l" specifies line for histogram
    //  legend13->AddEntry(h_nuPtless, "less", "l");
      legend13->SetTextSize(.03); 
      legend13->Draw(); 
  

      TCanvas *cnuPtEta = new TCanvas();
      hPtEta->Draw("COLZ");
    //   TCanvas *cnuPtEtaless = new TCanvas();
    //  hPtEta_less->Draw("COLZ");

  TCanvas *crecogenPt[5];
      for(int i=0;i<5;i++){
       new TCanvas();
      hRecoGenPt[i]->Draw("COLZ");
      hRecoGenPt[i]->SetStats(0);
        }

    //  TCanvas *crat =  new TCanvas();
     // hRecoGenPtRat->Draw("COLZ");
 
      TCanvas *CgenPtnuPt= new TCanvas();
      hGenPtNuPt->Draw("COLZ");
      TCanvas *noGenRecoPt= new TCanvas();
      hRecoGenPt_2->Draw("COLZ");                     

      TCanvas *cbPt = new TCanvas();
      hbPt->Draw();
      TCanvas *cbEta = new TCanvas();
      hbEta->Draw();
      TCanvas *cbPhi = new TCanvas();
      hbPhi->Draw();                      

      
    TCanvas *crecogenPt2[5];
      for(int i=0;i<5;i++){
       new TCanvas();
      hRecoGenPt_Pb[i]->Draw("COLZ");
      hRecoGenPt_Pb[i]->SetStats(0);
        }                                           */

      h_CMSPt_Pb[0]->SetLineColor(kRed);
      h_CMSPt_Pb[1]->SetLineColor(kOrange);
      h_CMSPt_Pb[2]->SetLineColor(kBlack);
      h_CMSPt_Pb[3]->SetLineColor(kViolet);
      h_CMSPt_Pb[4]->SetLineColor(kBlue);

      TCanvas *c_cmsPt2 = new TCanvas(); 
      h_CMSPt_Pb[0]->Draw(); 
      for(int i=1;i<5;i++){
      h_CMSPt_Pb[i]->Draw("SAME"); }
      h_CMSPt_Pb[0]->SetStats(0);
     // c_cmsPt2->SetLogy();
      TLegend *legend31 = new TLegend(0.15, 0.4, 0.4, 0.85); 
      h_CMSPt_Pb[0]->GetYaxis()->SetRangeUser(1,(h_CMSPt_Pb[4]->GetMaximum())*1.2);
      legend31->AddEntry((TObject*)0,"PbPb Collisons","");
      for(int i=0;i<5;i++){
      legend31->AddEntry(h_CMSPt_Pb[i], Form("Cut %.0f",cut[i]), "l");} 
      legend31->SetTextSize(.03); 
      h_CMSPt_Pb[0]->GetXaxis()->CenterTitle(true);
      h_CMSPt_Pb[0]->GetYaxis()->CenterTitle(true);
      legend31->Draw();

      hmT[0]->SetLineColor(kRed);
      hmT[1]->SetLineColor(kOrange);
      hmT[2]->SetLineColor(kBlack);
      hmT[3]->SetLineColor(kViolet);
      hmT[4]->SetLineColor(kBlue);

      TCanvas *crecosize= new TCanvas();
      hrecosize->Draw();

      /*TCanvas *cmT = new TCanvas();
      hmT[0]->Draw();
      for(int i=1;i<5;i++){
      hmT[i]->Draw("SAME"); }
      hmT[0]->SetStats(0);
      double wboson = 80.377;
      TLine *line = new TLine(wboson, cmT->GetUymin(), wboson, cmT->GetUymax());
      line->SetLineStyle(3);
      line->SetLineColor(kBlack);
      line->Draw("SAME");
      TLegend *legend25 = new TLegend(0.6, 0.6, 0.85, 0.85); 
      legend25->AddEntry((TObject*)0,"pp Collisons","");
      for(int i=0;i<5;i++){
      legend25->AddEntry(hmT[i], Form("Cut %.0f",cut[i]), "l");} // "l" specifies line for histogram
      hmT[0]->GetXaxis()->CenterTitle(true);
      hmT[0]->GetYaxis()->CenterTitle(true);
      legend25->SetTextSize(.03); 
      legend25->Draw();             */

      //cout<<cmT->GetUymax()<<cmT->GetUymin()<<endl;

     
     /* hmT2[0]->SetLineColor(kRed);
      hmT2[1]->SetLineColor(kOrange);
      hmT2[2]->SetLineColor(kBlack);
      hmT2[3]->SetLineColor(kViolet);
      hmT2[4]->SetLineColor(kBlue);

      TCanvas *cmT2 = new TCanvas();
      hmT2[0]->Draw();
      for(int i=1;i<5;i++){
      hmT2[i]->Draw("SAME"); }
      //hmT2[0]->SetStats(0);
      hmT2[0]->GetYaxis()->SetRangeUser(1,(hmT2[4]->GetMaximum())*1.2);
      double wboson = 80.377;
      TLine *line2 = new TLine(wboson, hmT2[0]->GetMinimum(), wboson, (hmT2[0]->GetMaximum())*1.2);
      line2->SetLineStyle(3);
      line2->SetLineColor(kBlack);
      line2->Draw("SAME");
      TLegend *legend30 = new TLegend(0.6, 0.6, 0.85, 0.85); 
      legend30->AddEntry((TObject*)0,"PbPb Collisons","");
      for(int i=0;i<5;i++){
      legend30->AddEntry(hmT[i], Form("Cut %.0f",cut[i]), "l");} // "l" specifies line for histogram
      hmT2[0]->GetXaxis()->CenterTitle(true);
      hmT2[0]->GetYaxis()->CenterTitle(true);
      legend30->SetTextSize(.03); 
      legend30->Draw();                             */

      hmT2_split[0]->SetLineColor(kRed);
      hmT2_split[1]->SetLineColor(kOrange);
      hmT2_split[2]->SetLineColor(kBlack);
      hmT2_split[3]->SetLineColor(kViolet);
      hmT2_split[4]->SetLineColor(kBlue);

      TCanvas *cmT2_split = new TCanvas();
      hmT2_split[0]->Draw();
      for(int i=1;i<5;i++){
      hmT2_split[i]->Draw("SAME"); }
      hmT2_split[0]->SetStats(0);
      hmT2_split[0]->GetYaxis()->SetRangeUser(1,(hmT2_split[4]->GetMaximum())*1.2);
      double wboson = 80.377;
      TLine *line3 = new TLine(wboson, hmT2_split[0]->GetMinimum(), wboson, (hmT2_split[0]->GetMaximum())*1.2);
      line3->SetLineStyle(3);
      line3->SetLineColor(kBlack);
      line3->Draw("SAME");
      TLegend *legend31 = new TLegend(0.70, 0.62, 0.95, 1.0); 
      legend31->AddEntry((TObject*)0,"PbPb Collisons","");
      for(int i=0;i<5;i++){
      legend31->AddEntry(hmT2_split[i], Form("Cut %.0f",cut[i]), "l");} // "l" specifies line for histogram
      hmT2_split[0]->GetXaxis()->CenterTitle(true);
      hmT2_split[0]->GetYaxis()->CenterTitle(true);
      legend31->SetTextSize(.03); 
      legend31->Draw();                                                     

      hmT2_split2[0]->SetLineColor(kRed);
      hmT2_split2[1]->SetLineColor(kOrange);
      hmT2_split2[2]->SetLineColor(kBlack);
      hmT2_split2[3]->SetLineColor(kViolet);
      hmT2_split2[4]->SetLineColor(kBlue);

      TCanvas *cmT2_split2 = new TCanvas();
      hmT2_split2[0]->Draw();
      for(int i=1;i<5;i++){
      hmT2_split2[i]->Draw("SAME"); }
      hmT2_split2[0]->SetStats(0);
      hmT2_split2[0]->GetYaxis()->SetRangeUser(1,(hmT2_split2[4]->GetMaximum())*1.2);
      double wboson = 80.377;
      TLine *line4 = new TLine(wboson, hmT2_split2[0]->GetMinimum(), wboson, (hmT2_split2[0]->GetMaximum())*1.2);
      line4->SetLineStyle(3);
      line4->SetLineColor(kBlack);
      line4->Draw("SAME");
      TLegend *legend32 = new TLegend(0.70, 0.62, 0.95, 1.0); 
      legend32->AddEntry((TObject*)0,"PbPb Collisons","");
      for(int i=0;i<5;i++){
      legend32->AddEntry(hmT2_split2[i], Form("Cut %.0f",cut[i]), "l");} // "l" specifies line for histogram
      hmT2_split2[0]->GetXaxis()->CenterTitle(true);
      hmT2_split2[0]->GetYaxis()->CenterTitle(true);
      legend32->SetTextSize(.03); 
      legend32->Draw();                                                                       

/*
crecogenPt5->SaveAs("C:/Users/user/Desktop/5RecoVsGenChg.png");  
crat->SaveAs("C:/Users/user/Desktop/Ratio.png"); */
//for(int i=0;i<5:i++){
//Form("crecogenPt%f",cut[i])->SaveAsForm("C:/Users/user/Desktop/%fAdjustERecoVsGenChg.png",cut[i]);  }
//CgenPtnuPt->SaveAs("C:/Users/user/Desktop/AdjustGenNuPt.png");  
//noGenRecoPt->>SaveAs("C:/Users/user/Desktop/NoGenReco.png"); 

/*h_CMSPtNo->SaveAs("C:/Users/user/Desktop/Reco-Gen with no cut.png"); 
h_CMSPt->SaveAs("C:/Users/user/Desktop/Reco-Gen with Cut.png"); 
hbEta->SaveAs("C:/Users/user/Desktop/b Eta.png");
hbPhi->SaveAs("C:/Users/user/Desktop/b Phi.png");
hbPt->SaveAs("C:/Users/user/Desktop/b Pt.png");*/


//c_cmsPt->SaveAs("C:/Users/user/Desktop/Reco-Gen with Cut.png"); 
//cmT->SaveAs("C:/Users/user/Desktop/EditRTransMassCuts.png"); 
//cmT2->SaveAs("C:/Users/user/Desktop/PbPbTransMassCuts.png");
c_cmsPt2->SaveAs("C:/Users/user/Desktop/PbSplitReco-Gen.png");
//crecosize->SaveAs("C:/Users/user/Desktop/RecoParSize.png");
cmT2_split->SaveAs("C:/Users/user/Desktop/BLessTransMass.png");
cmT2_split2->SaveAs("C:/Users/user/Desktop/BGreaterTransMass.png");


}
